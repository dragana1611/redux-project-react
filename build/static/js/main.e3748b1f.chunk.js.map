{"version":3,"sources":["components/Counter.module.css","components/Header.module.css","components/UserProfile.module.css","store/counter-slice.js","components/Counter.js","store/auth-slice.js","components/Header.js","components/Auth.js","components/UserProfile.js","App.js","store/index.js","index.js","components/Auth.module.css"],"names":["module","exports","counterSlice","createSlice","name","initialState","counter","showCounter","reducers","increment","state","decrement","increase","action","payload","toggleCounter","counterActions","actions","Counter","dispatch","useDispatch","useSelector","show","_jsxs","className","classes","children","_jsx","value","onClick","authSlice","isAuthenticated","login","logout","authActions","Header","isAuth","auth","header","href","Auth","onSubmit","event","preventDefault","control","htmlFor","type","id","UserProfile","profile","App","_Fragment","store","configureStore","reducer","counterReducer","authReducer","createRoot","document","getElementById","render","Provider"],"mappings":"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","file":"static/js/main.e3748b1f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__2AVtM\",\"value\":\"Counter_value__36CNc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__RU0Mw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"UserProfile_profile__1iVzq\"};","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialCounterState = { counter: 0, showCounter: true };\r\n\r\nconst counterSlice = createSlice({\r\n  name: \"counter\",\r\n  initialState: initialCounterState,\r\n  reducers: {\r\n    increment(state) {\r\n      state.counter++; //here we are allowed to \"mutate\" the state. We still have immutable code here even though it doesn't look like it because of this internally used package.\r\n    },\r\n    decrement(state) {\r\n      state.counter--;\r\n    },\r\n    increase(state, action) {\r\n      state.counter = state.counter + action.payload; //action.amount\r\n    },\r\n    toggleCounter(state) {\r\n      state.showCounter = !state.showCounter;\r\n    },\r\n  },\r\n});\r\n\r\n// const counterReducer = (state = initialState, action) => {\r\n//   if (action.type === \"increment\") {\r\n//     return {\r\n//       counter: state.counter + 1,\r\n//       showCounter: state.showCounter,\r\n//     };\r\n//   }\r\n\r\n//   if (action.type === \"increase\") {\r\n//     return {\r\n//       counter: state.counter + action.amount,\r\n//       showCounter: state.showCounter,\r\n//     };\r\n//   }\r\n\r\n//   if (action.type === \"decrement\") {\r\n//     return {\r\n//       counter: state.counter - 1,\r\n//       showCounter: state.showCounter,\r\n//     };\r\n//   }\r\n\r\n//   if (action.type === \"toggle\") {\r\n//     return {\r\n//       showCounter: !action.showCounter,\r\n//       counter: state.counter,\r\n//     };\r\n//   }\r\n\r\n//   return state;\r\n// };\r\n\r\n// const store = createStore(counterReducer);\r\n\r\n// const store = createStore(counterSlice.reducer);\r\n\r\nexport const counterActions = counterSlice.actions;\r\n\r\nexport default counterSlice.reducer;\r\n","import classes from \"./Counter.module.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { counterActions } from \"../store/counter-slice\";\n\nconst Counter = () => {\n  const dispatch = useDispatch(); //f-on which we can call, which will dispatch an action against our redux store\n  const counter = useSelector((state) => state.counter.counter); //state managed by redux\n  const show = useSelector((state) => state.counter.showCounter);\n\n  const incrementHandler = () => {\n    // dispatch({ type: \"increment\" });\n    dispatch(counterActions.increment());\n    //increment() is a method on the actions object, which we can call, and will create action objects for us. Therefore these methods are called action creators and they will create action objects for us where these objects already have a type property with a unique identifier per action.\n  };\n\n  const increaseHandler = () => {\n    // dispatch({ type: \"increase\", amount: 5 }); // amount -> extra action payload\n    dispatch(counterActions.increase(5)); // {type: SOME_UNIQUE_IDENTIFIER, payload: 5}\n  };\n\n  const decrementHandler = () => {\n    // dispatch({ type: \"decrement\" });\n    dispatch(counterActions.decrement());\n  };\n\n  const toggleCounterHandler = () => {\n    // dispatch({ type: \"toggle\" });\n    dispatch(counterActions.toggleCounter());\n  };\n\n  return (\n    <main className={classes.counter}>\n      <h1>Redux Counter</h1>\n      {show && <div className={classes.value}>{counter}</div>}\n      <div>\n        <button onClick={incrementHandler}>Increment</button>\n        <button onClick={increaseHandler}>Increase by 5</button>\n        <button onClick={decrementHandler}>Decrement</button>\n      </div>\n      <button onClick={toggleCounterHandler}>Toggle Counter</button>\n    </main>\n  );\n};\n\nexport default Counter;\n\n//We allways return a brend new snapshot, a brend new state object which redux will use to replace its existing state with. The objects which we return in the reducer will not be merged with the existing state. They will overwrite the existing state.\n","import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialAuthState = {\r\n  isAuthenticated: false,\r\n};\r\n\r\nconst authSlice = createSlice({\r\n  name: \"authentication\",\r\n  initialState: initialAuthState,\r\n  reducers: {\r\n    login(state) {\r\n      state.isAuthenticated = true;\r\n    },\r\n    logout(state) {\r\n      state.isAuthenticated = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const authActions = authSlice.actions;\r\n\r\nexport default authSlice.reducer;\r\n","import { useSelector, useDispatch } from \"react-redux\";\n\nimport classes from \"./Header.module.css\";\nimport { authActions } from \"../store/auth-slice\";\n\nconst Header = () => {\n  const dispatch = useDispatch();\n  const isAuth = useSelector((state) => state.auth.isAuthenticated);\n\n  const logoutHandler = () => {\n    dispatch(authActions.logout());\n  };\n\n  return (\n    <header className={classes.header}>\n      <h1>Redux Auth</h1>\n      {isAuth && (\n        <nav>\n          <ul>\n            <li>\n              <a href=\"/\">My Products</a>\n            </li>\n            <li>\n              <a href=\"/\">My Sales</a>\n            </li>\n            <li>\n              <button onClick={logoutHandler}>Logout</button>\n            </li>\n          </ul>\n        </nav>\n      )}\n    </header>\n  );\n};\n\nexport default Header;\n","import { useDispatch } from \"react-redux\";\n\nimport classes from \"./Auth.module.css\";\nimport { authActions } from \"../store/auth-slice\";\n\nconst Auth = () => {\n  const dispatch = useDispatch();\n\n  const loginHandler = (event) => {\n    event.preventDefault();\n\n    dispatch(authActions.login());\n  };\n\n  return (\n    <main className={classes.auth}>\n      <section>\n        <form onSubmit={loginHandler}>\n          <div className={classes.control}>\n            <label htmlFor=\"email\">Email</label>\n            <input type=\"email\" id=\"email\" />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"password\">Password</label>\n            <input type=\"password\" id=\"password\" />\n          </div>\n          <button>Login</button>\n        </form>\n      </section>\n    </main>\n  );\n};\n\nexport default Auth;\n","import classes from \"./UserProfile.module.css\";\n\nconst UserProfile = () => {\n  return (\n    <main className={classes.profile}>\n      <h2>My User Profile</h2>\n    </main>\n  );\n};\n\nexport default UserProfile;\n","import { useSelector } from \"react-redux\";\n\nimport Counter from \"./components/Counter\";\nimport Header from \"./components/Header\";\nimport Auth from \"./components/Auth\";\nimport UserProfile from \"./components/UserProfile\";\n\nfunction App() {\n  const isAuth = useSelector((state) => state.auth.isAuthenticated);\n\n  return (\n    <>\n      <Header />\n      {!isAuth && <Auth />}\n      {isAuth && <UserProfile />}\n      <Counter />\n    </>\n  );\n}\n\nexport default App;\n","// import { legacy_createStore as createStore, combineReducers } from \"redux\";\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport counterReducer from \"./counter-slice\";\r\nimport authReducer from \"./auth-slice\";\r\n\r\nconst store = configureStore({\r\n  // reducer: { counter: counterSlice.reducer, auth: authSlice.reducer },\r\n  reducer: { counter: counterReducer, auth: authReducer },\r\n});\r\n\r\nexport default store;\r\n\r\n//We should NEVER MUTATE the state, the existing state. We should never change the existing state. Instead, always override it by returning a brand new state object.\r\n","import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { Provider } from \"react-redux\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./store/index\";\n\nconst root = createRoot(document.getElementById(\"root\"));\nroot.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth\":\"Auth_auth__3isOv\",\"control\":\"Auth_control__18sQe\"};"],"sourceRoot":""}